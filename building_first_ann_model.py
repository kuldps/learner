# -*- coding: utf-8 -*-
"""Building first ANN model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_zQbz9Wd-ybDAc2MCCSQL6gVNPn_K2Rn
"""

import tensorflow as tf
from tensorflow import keras as k

from tensorflow.keras import Sequential

from tensorflow.keras.layers import Flatten, Dense

import numpy as np

import pandas as pd

from sklearn.model_selection import train_test_split

data=pd.read_csv('https://raw.githubusercontent.com/laxmimerit/Building-Your-First-ANN-with-TensorFlow-2.0/master/Customer_Churn_Modelling.csv')

data.head()

x=data.drop(labels=['RowNumber','CustomerId','Surname','Exited'],axis=1)
y=data['Exited']

x.head(10)

y.head()

"""**we need to encode string fields to numerical values e.g. Geography and gender and then need to seperate different
categorical values to diffenrent class e.g Geography which cab take 3 values, no need to change gender as it takes only two values**
"""

from sklearn.preprocessing import LabelEncoder

label1=LabelEncoder()
x['Geography']=label1.fit_transform(x['Geography'])

x.head()

label2=LabelEncoder()
x['Gender']=label1.fit_transform(x['Gender'])

x.head(10)

x=pd.get_dummies(x,drop_first=True,columns=['Geography'])
x.head()

"""**need to bring all data to same scale, standardization**"""

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()

x_train ,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0,stratify=y)

x_train=scaler.fit_transform(x_train)

x_test=scaler.transform(x_test)

x_train[0]

"""**Start building the model**"""

model=Sequential()

model.add(Dense(x.shape[1],activation='relu', input_dim=x.shape[1]))
model.add(Dense(128,activation='relu'))
model.add(Dense(1,activation='sigmoid'))

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

model.fit(x_train,y_train.to_numpy(),batch_size=10,epochs=10,verbose=1)

y_pred=model.predict_classes(x_test)

model.evaluate(x_test,y_test)

from sklearn.metrics import confusion_matrix, accuracy_score

confusion_matrix(y_test,y_pred)

accuracy_score(y_pred,y_test)

